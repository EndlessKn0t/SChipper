package Schipper

import chisel3._
import chisel3.util._

object Instructions {
  // R-Type   = BitPat("b funct7 rs2-- rs1-- fu3 rd--- opcode-")
  // I-Type   = BitPat("b imm[11:0]--- rs1-- fu3 rd--- opcode-")
  // S-Type   = BitPat("b [11:5] rs2-- rs1-- 4:0 rd--- opcode-")
  // B-Type   = BitPat("b12|10:5 rs2-- rs1-- fu3 rd--- opcode-")
  // U-Type   = BitPat("b imm[31:12]------------ rd--- opcode-")
  // J-Type   = BitPat("b imm[20|10:1|11|19:12]- rd--- opcode-")

  // Load/Store (I)
  val LW      = BitPat("b??????? ????? ????? 010 ????? 0000011")
  val SW      = BitPat("b??????? ????? ????? 010 ????? 0100011")

  // Add (R)
  val ADD     = BitPat("b0000000 ?????? ???? 000 ????? 0110011")
  val ADDI    = BitPat("b??????? ?????? ???? 000 ????? 0010011")

  // Sub (R)
  val SUB     = BitPat("b0100000 ?????? ???? 000 ????? 0110011")

  // Logical operations (R)
  val AND     = BitPat("b0000000 ?????? ???? 111 ????? 0110011")
  val OR      = BitPat("b0000000 ?????? ???? 110 ????? 0110011")
  val XOR     = BitPat("b0000000 ?????? ???? 100 ????? 0110011")
  // Logical operations (I)
  val ANDI    = BitPat("b??????? ?????? ???? 111 ????? 0010011")
  val ORI     = BitPat("b??????? ?????? ???? 110 ????? 0010011")
  val XORI    = BitPat("b??????? ?????? ???? 100 ????? 0010011")

  // Shift (R)
  val SLL     = BitPat("b0000000 ?????? ???? 001 ????? 0110011")
  val SRL     = BitPat("b0000000 ?????? ???? 101 ????? 0110011")
  val SRA     = BitPat("b0100000 ?????? ???? 101 ????? 0110011")
  val SLLI    = BitPat("b0000000 ?????? ???? 001 ????? 0010011")
  val SRLI    = BitPat("b0000000 ?????? ???? 101 ????? 0010011")
  val SRAI    = BitPat("b0100000 ?????? ???? 101 ????? 0010011")

  // Compare (R)
  val SLT     = BitPat("b0000000 ?????? ???? 010 ????? 0110011")
  val SLTU    = BitPat("b0000000 ?????? ???? 011 ????? 0110011")
  // Compare (I)
  val SLTI    = BitPat("b??????? ?????? ???? 010 ????? 0010011")
  val SLTIU   = BitPat("b??????? ?????? ???? 011 ????? 0010011")

  // Branch (B)
  val BEQ     = BitPat("b??????? ?????? ???? 000 ????? 1100011")
  val BNE     = BitPat("b??????? ?????? ???? 001 ????? 1100011")
  val BLT     = BitPat("b??????? ?????? ???? 100 ????? 1100011")
  val BGE     = BitPat("b??????? ?????? ???? 101 ????? 1100011")
  val BLTU    = BitPat("b??????? ?????? ???? 110 ????? 1100011")
  val BGEU    = BitPat("b??????? ?????? ???? 111 ????? 1100011")

  // Jump (J)
  val JAL     = BitPat("b??????? ?????? ???? ??? ????? 1101111")
  val JALR    = BitPat("b??????? ?????? ???? 000 ????? 1100111")

  // Load immediate (U)
  val LUI     = BitPat("b??????? ?????? ???? ??? ????? 0110111")
  val AUIPC   = BitPat("b??????? ?????? ???? ??? ????? 0010111")

  // CSR (~I)
  val CSRRW   = BitPat("b??????? ?????? ???? 001 ????? 1110011")
  val CSRRWI  = BitPat("b??????? ?????? ???? 101 ????? 1110011")
  val CSRRS   = BitPat("b??????? ?????? ???? 010 ????? 1110011")
  val CSRRSI  = BitPat("b??????? ?????? ???? 110 ????? 1110011")
  val CSRRC   = BitPat("b??????? ?????? ???? 011 ????? 1110011")
  val CSRRCI  = BitPat("b??????? ?????? ???? 111 ????? 1110011")

  // Exception
  val ECALL   = BitPat("b0000000 000000 0000 000 00000 1110011")
  val EBREAK  = BitPat("b0000000 000010 0000 000 00000 1110011")
  
}